{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Display","props","id","drumName","ReactDOM","render","useState","currentDrum","setCurrentDrum","Q","useRef","W","E","A","S","D","Z","X","C","drumMap","KeyQ","audio","name","KeyW","KeyE","KeyA","KeyS","KeyD","KeyZ","KeyX","KeyC","useEffect","document","addEventListener","handleKeyDown","removeEventListener","e","playDrum","code","handleDrumClick","target","drum","current","play","className","onClick","ref","src","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28265153.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nfunction Display(props) {\n\treturn (\n\t\t<div id=\"display\">{props.drumName}</div>\n\t);\n}\n\n/* Sounds samples and names are from the freeCodeCamp example for this project\n   as I know nothing about drum samples.\n   https://codepen.io/freeCodeCamp/pen/MJyNMd\n*/\nfunction DrumMachine(props) {\n\tconst [currentDrum, setCurrentDrum] = useState('');\n\n\tconst Q = useRef(null);\n\tconst W = useRef(null);\n\tconst E = useRef(null);\n\tconst A = useRef(null);\n\tconst S = useRef(null);\n\tconst D = useRef(null);\n\tconst Z = useRef(null);\n\tconst X = useRef(null);\n\tconst C = useRef(null);\n\n\tconst drumMap = {\n\t\tKeyQ: {\n\t\t\taudio: Q,\n\t\t\tname: 'Heater 1'\n\t\t},\n\t\tKeyW: {\n\t\t\taudio: W,\n\t\t\tname: 'Heater 2'\n\t\t},\n\t\tKeyE: {\n\t\t\taudio: E,\n\t\t\tname: 'Heater 3'\n\t\t},\n\t\tKeyA: {\n\t\t\taudio: A,\n\t\t\tname: 'Heater 4'\n\t\t},\n\t\tKeyS: {\n\t\t\taudio: S,\n\t\t\tname: 'Clap'\n\t\t},\n\t\tKeyD: {\n\t\t\taudio: D,\n\t\t\tname: 'Open HH'\n\t\t},\n\t\tKeyZ: {\n\t\t\taudio: Z,\n\t\t\tname: 'Kick n\\' Hat'\n\t\t},\n\t\tKeyX: {\n\t\t\taudio: X,\n\t\t\tname: 'Kick'\n\t\t},\n\t\tKeyC: {\n\t\t\taudio: C,\n\t\t\tname: 'Closed HH'\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tdocument.addEventListener('keydown', handleKeyDown);\n\t\treturn () => {\n\t\t\tdocument.removeEventListener('keydown', handleKeyDown);\n\t\t}\n\t});\n\n\tconst handleKeyDown = (e) => {\n\t\tplayDrum(e.code);\n\t}\n\tconst handleDrumClick = (e) => {\n\t\tplayDrum(e.target.name);\n\t}\n\tconst playDrum = (name) => {\n\t\tconst drum = drumMap[name];\n\t\tif (drum) {\n\t\t\tsetCurrentDrum(drum.name);\n\t\t\tdrum.audio.current.play();\n\t\t}\n\t}\n\n\treturn (\n\t\t<div id=\"drum-machine\">\n\t\t\t<Display drumName={currentDrum} />\n\t\t\t<div className=\"drum-pads\">\n\t\t\t\t<button className=\"drum-pad\" id=\"drum-pad-Q\" name=\"KeyQ\" onClick={handleDrumClick}>\n\t\t\t\t\tQ\n\t\t\t\t\t<audio className=\"clip\" id=\"Q\" ref={Q} src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\" />\n\t\t\t\t</button>\n\t\t\t\t<button className=\"drum-pad\" id=\"drum-pad-W\" name=\"KeyW\" onClick={handleDrumClick}>\n\t\t\t\t\tW\n\t\t\t\t\t<audio className=\"clip\" id=\"W\" ref={W} src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\" />\n\t\t\t\t</button>\n\t\t\t\t<button className=\"drum-pad\" id=\"drum-pad-E\" name=\"KeyE\" onClick={handleDrumClick}>\n\t\t\t\t\tE\n\t\t\t\t\t<audio className=\"clip\" id=\"E\" ref={E} src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\" />\n\t\t\t\t</button>\n\t\t\t\t<button className=\"drum-pad\" id=\"drum-pad-A\" name=\"KeyA\" onClick={handleDrumClick}>\n\t\t\t\t\tA\n\t\t\t\t\t<audio className=\"clip\" id=\"A\" ref={A} src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\" />\n\t\t\t\t</button>\n\t\t\t\t<button className=\"drum-pad\" id=\"drum-pad-S\" name=\"KeyS\" onClick={handleDrumClick}>\n\t\t\t\t\tS\n\t\t\t\t\t<audio className=\"clip\" id=\"S\" ref={S} src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\" />\n\t\t\t\t</button>\n\t\t\t\t<button className=\"drum-pad\" id=\"drum-pad-D\" name=\"KeyD\" onClick={handleDrumClick}>\n\t\t\t\t\tD\n\t\t\t\t\t<audio className=\"clip\" id=\"D\" ref={D} src=\"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\" />\n\t\t\t\t</button>\n\t\t\t\t<button className=\"drum-pad\" id=\"drum-pad-Z\" name=\"KeyZ\" onClick={handleDrumClick}>\n\t\t\t\t\tZ\n\t\t\t\t\t<audio className=\"clip\" id=\"Z\" ref={Z} src=\"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\" />\n\t\t\t\t</button>\n\t\t\t\t<button className=\"drum-pad\" id=\"drum-pad-X\" name=\"KeyX\" onClick={handleDrumClick}>\n\t\t\t\t\tX\n\t\t\t\t\t<audio className=\"clip\" id=\"X\" ref={X} src=\"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\" />\n\t\t\t\t</button>\n\t\t\t\t<button className=\"drum-pad\" id=\"drum-pad-C\" name=\"KeyC\" onClick={handleDrumClick}>\n\t\t\t\t\tC\n\t\t\t\t\t<audio className=\"clip\" id=\"C\" ref={C} src=\"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\" />\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nReactDOM.render(<DrumMachine />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}